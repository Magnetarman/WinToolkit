# GitHub Actions Workflow per Continuous Integration con Test PowerShell
# Questo workflow si attiva solo quando vengono modificati file .ps1 nella cartella /tool
# Compila automaticamente WinToolkit.ps1 e testa il risultato prima di committare

name: CI_UpdateWinToolkit_Dev

# Configurazione del trigger: si attiva solo su modifiche a file .ps1 nella cartella /tool
on:
  push:
    branches: [Dev]
    paths:
      - "tool/*.ps1"
      - "WinToolkit-template.ps1"
      - "compiler.ps1"

# Definizione dei job del workflow
jobs:
  # Job principale che gestisce compilazione, test e commit automatico
  compile_test_and_commit:
    # Esecuzione su macchina virtuale Windows (ultima versione stabile)
    runs-on: windows-latest

    # Configurazione dei permessi necessari per il workflow
    permissions:
      contents: write
      actions: read

    # Definizione dei passi sequenziali del job
    steps:
      # Step 1: Checkout del codice sorgente con fetch completo per analizzare i commit
      - name: Checkout del repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # Step 2: Verifica se ci sono modifiche rilevanti ai file PowerShell
      - name: Verifica modifiche rilevanti
        id: check_changes
        shell: pwsh
        run: |
          Write-Host "üîç VERIFICA MODIFICHE RILEVANTI" -ForegroundColor Cyan
          Write-Host "=" * 60 -ForegroundColor Yellow

          # Lista dei file che dovrebbero triggerare il workflow
          $relevantPaths = @(
            "tool/*.ps1",
            "WinToolkit-template.ps1",
            "compiler.ps1"
          )

          # Ottieni i file modificati nell'ultimo commit
          $changedFiles = git diff --name-only HEAD~1 HEAD

          if ($changedFiles.Count -eq 0) {
            Write-Host "‚ÑπÔ∏è Nessun file modificato nel commit corrente" -ForegroundColor Yellow
            Write-Host "‚úÖ Workflow completato senza azioni necessarie" -ForegroundColor Green
            exit 0
          }

          Write-Host "üìã File modificati nell'ultimo commit:" -ForegroundColor Green
          $changedFiles | ForEach-Object { Write-Host "  - $_" -ForegroundColor Gray }

          # Verifica se almeno uno dei file modificati √® rilevante
          $hasRelevantChanges = $false
          foreach ($file in $changedFiles) {
            foreach ($pattern in $relevantPaths) {
              if ($file -like $pattern) {
                $hasRelevantChanges = $true
                break
              }
            }
            if ($hasRelevantChanges) { break }
          }

          if (-not $hasRelevantChanges) {
            Write-Host "‚ÑπÔ∏è Nessuna modifica rilevante per questo workflow" -ForegroundColor Yellow
            Write-Host "‚úÖ Workflow completato senza azioni necessarie" -ForegroundColor Green
            exit 0
          }

          Write-Host "‚úÖ Modifiche rilevanti rilevate - procedo con compilazione e test" -ForegroundColor Green
          Write-Output "has_relevant_changes=true" >> $env:GITHUB_OUTPUT

      # Step 3: Configurazione ambiente PowerShell
      - name: Setup PowerShell
        shell: pwsh
        run: |
          Write-Host "üîß CONFIGURAZIONE AMBIENTE POWERSHELL" -ForegroundColor Cyan
          $PSVersionTable
          Write-Host "‚úÖ PowerShell configurato" -ForegroundColor Green

      # Step 4: Compilazione WinToolkit.ps1 tramite compiler.ps1
      - name: Compilazione WinToolkit.ps1
        if: steps.check_changes.outputs.has_relevant_changes == 'true'
        shell: pwsh
        run: |
          Write-Host "üî® COMPILAZIONE WINToolKIT.PS1" -ForegroundColor Cyan
          Write-Host "=" * 60 -ForegroundColor Yellow

          # Verifica che compiler.ps1 esista
          if (-not (Test-Path "compiler.ps1")) {
            Write-Error "‚ùå File compiler.ps1 non trovato"
            exit 1
          }

          # Verifica che WinToolkit-template.ps1 esista
          if (-not (Test-Path "WinToolkit-template.ps1")) {
            Write-Error "‚ùå File WinToolkit-template.ps1 non trovato"
            exit 1
          }

          # Verifica che ci siano file .ps1 nella cartella tool
          $toolFiles = Get-ChildItem -Path "tool" -Name "*.ps1" -ErrorAction SilentlyContinue
          if ($toolFiles.Count -eq 0) {
            Write-Error "‚ùå Nessun file .ps1 trovato nella cartella tool"
            exit 1
          }

          Write-Host "üìã File da compilare: $($toolFiles.Count)" -ForegroundColor Green
          $toolFiles | ForEach-Object { Write-Host "  - $_" -ForegroundColor Gray }

          # Esegui la compilazione
          try {
            & ".\compiler.ps1"
            if ($LASTEXITCODE -ne 0) {
              Write-Error "‚ùå Compilazione fallita con exit code: $LASTEXITCODE"
              exit 1
            }
          }
          catch {
            Write-Error "‚ùå Errore durante la compilazione: $($_.Exception.Message)"
            exit 1
          }

          # Verifica che il file compilato sia stato creato
          if (-not (Test-Path "WinToolkit.ps1")) {
            Write-Error "‚ùå File WinToolkit.ps1 non creato dalla compilazione"
            exit 1
          }

          $fileSize = (Get-Item "WinToolkit.ps1").Length
          Write-Host "‚úÖ Compilazione completata: $([math]::Round($fileSize/1KB, 2)) KB" -ForegroundColor Green

      # Step 5: Test estesi del file compilato
      - name: Test Estesi WinToolkit Compilato
        if: steps.check_changes.outputs.has_relevant_changes == 'true'
        shell: pwsh
        run: |
          Write-Host "üîç TEST ESTESI DEL FILE COMPILATO" -ForegroundColor Cyan
          Write-Host "=" * 70 -ForegroundColor Yellow

          $winToolkitPath = "WinToolkit.ps1"

          # Verifica che il file esista
          if (-not (Test-Path $winToolkitPath)) {
            Write-Error "‚ùå File WinToolkit.ps1 non trovato"
            exit 1
          }

          Write-Host "üìã Test del file finale: WinToolkit.ps1" -ForegroundColor Green

          $totalErrors = 0
          $testResults = @()

          try {
            $scriptContent = Get-Content -Raw -Path $winToolkitPath -ErrorAction Stop

            # Test 1: Sintassi PowerShell
            Write-Host "üîç Test 1: Verifica sintassi..." -ForegroundColor Blue
            $parseErrors = $null
            $null = [System.Management.Automation.Language.Parser]::ParseInput($scriptContent, [ref]$null, [ref]$parseErrors)

            if ($parseErrors.Count -gt 0) {
              Write-Host "  ‚ùå Errori di sintassi:" -ForegroundColor Red
              foreach ($error in $parseErrors) {
                Write-Host "    Line $($error.Extent.StartLineNumber): $($error.Message)" -ForegroundColor Red
              }
              $totalErrors += $parseErrors.Count
              $testResults += "‚ùå Sintassi: $($parseErrors.Count) errori"
            }
            else {
              Write-Host "  ‚úÖ Sintassi OK" -ForegroundColor Green
              $testResults += "‚úÖ Sintassi: OK"
            }

            # Test 2: Verifica funzioni disponibili
            Write-Host "üîç Test 2: Verifica funzioni disponibili..." -ForegroundColor Blue
            $functions = [System.Management.Automation.Language.Parser]::ParseInput($scriptContent, [ref]$null, [ref]$null) |
                        Where-Object { $_.GetType().Name -eq "FunctionDefinitionAst" }

            # Tutte le funzioni sono opzionali - verifica solo cosa √® presente
            $expectedFunctions = @("WinRepairToolkit", "WinCleaner", "OfficeToolkit", "SetRustDesk", "WinUpdateReset", "WinInstallPSProfile", "WinReinstallStore", "WinBackupDriver", "GamingToolkit", "WinDriverInstall", "SearchRepair")
            $presentFunctions = $expectedFunctions | Where-Object { $functionName = $_; $functions.Name -contains $functionName }
            $missingFunctions = $expectedFunctions | Where-Object { $functionName = $_; $functions.Name -notcontains $functionName }

            $presentCount = $presentFunctions.Count
            $missingCount = $missingFunctions.Count

            Write-Host "  üìä Funzioni presenti: $presentCount" -ForegroundColor Green
            if ($presentFunctions.Count -gt 0) {
              $presentFunctions | ForEach-Object { Write-Host "    - $_" -ForegroundColor Green }
            }

            if ($missingCount -gt 0) {
              Write-Host "  ‚ö†Ô∏è Funzioni mancanti (in sviluppo o non implementate):" -ForegroundColor Yellow
              $missingFunctions | ForEach-Object { Write-Host "    - $_" -ForegroundColor Yellow }
              $testResults += "‚ö†Ô∏è Funzioni mancanti: $($missingCount) (normale durante sviluppo)"
            }
            else {
              Write-Host "  ‚úÖ Tutte le funzioni implementate presenti" -ForegroundColor Green
              $testResults += "‚úÖ Funzioni: Tutte presenti"
            }

            # Conta come avviso, non come errore
            $totalWarnings += $missingCount

            # Test 3: Struttura del menu
            Write-Host "üîç Test 3: Verifica struttura menu..." -ForegroundColor Blue
            $menuTests = @(
              @{ Pattern = "while \(\$true\)"; Name = "Menu principale" },
              @{ Pattern = "Operazioni Preliminari"; Name = "Categoria Operazioni Preliminari" },
              @{ Pattern = "Windows & Office"; Name = "Categoria Windows & Office" },
              @{ Pattern = "Driver & Gaming"; Name = "Categoria Driver & Gaming" },
              @{ Pattern = "Supporto"; Name = "Categoria Supporto" }
            )

            foreach ($test in $menuTests) {
              if ($scriptContent -match $test.Pattern) {
                Write-Host "  ‚úÖ $($test.Name)" -ForegroundColor Green
                $testResults += "‚úÖ $($test.Name)"
              }
              else {
                Write-Host "  ‚ùå $($test.Name) mancante" -ForegroundColor Red
                $totalErrors++
                $testResults += "‚ùå $($test.Name) mancante"
              }
            }

            # Test 4: Dimensione del file
            Write-Host "üîç Test 4: Verifica dimensione file..." -ForegroundColor Blue
            $fileSize = (Get-Item $winToolkitPath).Length
            $fileSizeKB = [math]::Round($fileSize/1KB, 2)

            if ($fileSize -lt 10000) {
              Write-Host "  ‚ùå File troppo piccolo: $($fileSize) bytes" -ForegroundColor Red
              $totalErrors++
              $testResults += "‚ùå Dimensione: $fileSizeKB KB (troppo piccolo)"
            }
            else {
              Write-Host "  ‚úÖ Dimensione OK: $fileSizeKB KB" -ForegroundColor Green
              $testResults += "‚úÖ Dimensione: $fileSizeKB KB"
            }

            # Test 5: Encoding UTF-8
            Write-Host "üîç Test 5: Verifica encoding..." -ForegroundColor Blue
            $encoding = [System.Text.Encoding]::GetEncoding('UTF-8')
            $preamble = $encoding.GetPreamble()
            $fileBytes = Get-Content $winToolkitPath -AsByteStream -ReadCount 0

            if ($fileBytes.Length -ge 3 -and $fileBytes[0] -eq $preamble[0] -and $fileBytes[1] -eq $preamble[1] -and $fileBytes[2] -eq $preamble[2]) {
              Write-Host "  ‚úÖ Encoding UTF-8 con BOM" -ForegroundColor Green
              $testResults += "‚úÖ Encoding: UTF-8 con BOM"
            }
            else {
              Write-Host "  ‚ö†Ô∏è Encoding senza BOM (accettabile)" -ForegroundColor Yellow
              $testResults += "‚ö†Ô∏è Encoding: Senza BOM"
            }

          }
          catch {
            Write-Host "  ‚ùå Errore durante i test: $($_.Exception.Message)" -ForegroundColor Red
            $totalErrors++
            $testResults += "‚ùå Errore test: $($_.Exception.Message)"
          }

          # Output risultati test
          Write-Host ""
          Write-Host "üìä RIEPILOGO TEST:" -ForegroundColor Cyan
          $testResults | ForEach-Object { Write-Host "  $_" -ForegroundColor Gray }

          # Valuta i risultati: procedi sempre se non ci sono errori di sintassi/struttura
          if ($totalErrors -gt 0) {
            Write-Host "‚ùå TEST FALLITI: $totalErrors errori di sintassi/struttura" -ForegroundColor Red
            Write-Host "üí° Suggerimento: Verifica la sintassi del file compilato" -ForegroundColor Cyan
            Write-Output "tests_passed=false" >> $env:GITHUB_OUTPUT
            exit 1
          }
          else {
            Write-Host "‚úÖ TUTTI I TEST SUPERATI!" -ForegroundColor Green
            if ($missingCount -gt 0) {
              Write-Host "‚ÑπÔ∏è Nota: $missingCount funzioni mancanti - normale durante sviluppo" -ForegroundColor Yellow
            }
            Write-Output "tests_passed=true" >> $env:GITHUB_OUTPUT
          }

      # Step 6: Commit automatico del file compilato (solo se i test passano)
      - name: Commit WinToolkit.ps1
        if: steps.check_changes.outputs.has_relevant_changes == 'true' && steps.compile_test_and_commit.outputs.tests_passed == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: |
            üîß Update WinToolkit.ps1 - Auto-compiled and tested

            ‚Ä¢ Compilazione automatica da file in /tool
            ‚Ä¢ Test di sintassi e struttura passati
            ‚Ä¢ Tutte le funzioni sono opzionali e in continuo sviluppo
            ‚Ä¢ File aggiornato e funzionale
          file_pattern: WinToolkit.ps1
          branch: Dev

      # Step 7: Output finale del workflow
      - name: Risultato Workflow
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Green
          Write-Host "‚ïë                 üéâ WORKFLOW COMPLETATO!                  ‚ïë" -ForegroundColor Green
          Write-Host "‚ïë                                                          ‚ïë" -ForegroundColor White

          if ("${{ steps.check_changes.outputs.has_relevant_changes }}" -eq "true") {
            Write-Host "‚ïë  ‚úÖ Modifiche rilevanti rilevate                         ‚ïë" -ForegroundColor Green
            Write-Host "‚ïë  üî® Compilazione eseguita                               ‚ïë" -ForegroundColor Green

            if ("${{ steps.compile_test_and_commit.outputs.tests_passed }}" -eq "true") {
              Write-Host "‚ïë  ‚úÖ Tutti i test superati                               ‚ïë" -ForegroundColor Green
              Write-Host "‚ïë  üìù Commit automatico eseguito                          ‚ïë" -ForegroundColor Green
              Write-Host "‚ïë                                                         ‚ïë" -ForegroundColor White
              Write-Host "‚ïë  üöÄ WinToolkit.ps1 aggiornato e pronto!                 ‚ïë" -ForegroundColor Cyan
            }
            else {
              Write-Host "‚ïë  ‚ùå Test falliti - commit non eseguito                  ‚ïë" -ForegroundColor Red
              Write-Host "‚ïë                                                         ‚ïë" -ForegroundColor White
              Write-Host "‚ïë  üí° Verifica i file in /tool e riprova                 ‚ïë" -ForegroundColor Cyan
            }
          }
          else {
            Write-Host "‚ïë  ‚ÑπÔ∏è Nessuna modifica rilevante                          ‚ïë" -ForegroundColor Yellow
            Write-Host "‚ïë  ‚è≠Ô∏è Workflow completato senza azioni                   ‚ïë" -ForegroundColor Yellow
          }

          Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -ForegroundColor Green
