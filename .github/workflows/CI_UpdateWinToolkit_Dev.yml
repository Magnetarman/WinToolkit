# GitHub Actions Workflow per Continuous Integration
# Questo workflow gestisce l'aggiornamento automatico di WinToolkit.ps1 sul branch dev

name: CI_UpdateWinToolkit_Dev

# Configurazione del trigger: il workflow si attiva solo sui push al branch 'dev'
# Questo garantisce che l'azione sia esclusiva per il ramo di sviluppo
on:
  push:
    branches: [Dev]

# Definizione dei job del workflow
jobs:
  # Job principale che gestisce build e commit automatico
  build_and_commit:
    # Esecuzione su macchina virtuale Ubuntu (ultima versione stabile)
    runs-on: ubuntu-latest
    
    # Definizione dei passi sequenziali del job
    steps:
      # Step 1: Checkout del codice sorgente
      # Utilizza l'azione ufficiale per clonare il repository
      - name: Checkout del repository
        uses: actions/checkout@v4
        with:
          # Necessario per permettere il push automatico successivo
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # Step 2: Configurazione dell'ambiente PowerShell e Node.js
      # Installa Node.js che Ã¨ necessario per molti runner di GitHub Actions
      - name: Setup Node.js per l'ambiente
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      # Step 3: Verifica e configurazione PowerShell
      # Assicura che PowerShell sia disponibile e configurato correttamente
      - name: Configurazione PowerShell
        run: |
          # Verifica che PowerShell sia installato e funzionante
          pwsh --version
          # Imposta i permessi di esecuzione per lo script
          chmod +x ./compiler.ps1
      
      # Step 4: Esecuzione dello script compiler.ps1
      # Questo script genera il file WinToolkit.ps1 come output
      - name: Esecuzione script compiler.ps1
        run: ./compiler.ps1
        shell: pwsh
      
      # Step 5: Controllo di sintassi del file generato
      # Verifica la correttezza sintattica di WinToolkit.ps1 prima del commit
      - name: Controllo sintassi WinToolkit.ps1
        run: |
          # Controllo sintattico senza esecuzione del codice
          # Se il parsing fallisce, il job termina con errore
          pwsh -NoProfile -NonInteractive -Command "
            try {
              $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content -Raw -Path './WinToolkit.ps1'), [ref]$null)
              Write-Host 'Controllo sintassi completato con successo'
            } catch {
              Write-Error 'Errore di sintassi rilevato in WinToolkit.ps1'
              exit 1
            }
          "
      
      # Step 6: Commit automatico del file aggiornato
      # Utilizza azione specializzata per commit e push automatici
      - name: Commit automatico WinToolkit.ps1
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          # Messaggio del commit standardizzato
          commit_message: "Update Wintoolkit-Dev"
          # Specifica solo il file da committare per evitare commit indesiderati
          file_pattern: WinToolkit.ps1
          # Configurazione dell'autore del commit
          commit_user_name: GitHub Actions Bot
          commit_user_email: actions@github.com
          # Branch di destinazione (deve corrispondere al branch corrente)
          branch: Dev
